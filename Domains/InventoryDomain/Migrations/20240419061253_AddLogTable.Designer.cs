// <auto-generated />
using System;
using Datalake.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Datalake.Database.Migrations
{
    [DbContext(typeof(DatalakeEfContext))]
    [Migration("20240419061253_AddLogTable")]
    partial class AddLogTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Datalake.PublicApi.Models.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GlobalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.BlockProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.ToTable("BlockProperties");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.BlockTag", b =>
                {
                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("BlockId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BlockTags");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<int?>("RefId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.Settings", b =>
                {
                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Formula")
                        .HasColumnType("text");

                    b.Property<Guid>("GlobalId")
                        .HasColumnType("uuid");

                    b.Property<short>("Interval")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCalculating")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScaling")
                        .HasColumnType("boolean");

                    b.Property<float>("MaxEu")
                        .HasColumnType("real");

                    b.Property<float>("MaxRaw")
                        .HasColumnType("real");

                    b.Property<float>("MinEu")
                        .HasColumnType("real");

                    b.Property<float>("MinRaw")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceItem")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.TagHistory", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("Number")
                        .HasColumnType("real");

                    b.Property<int>("Quality")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("Using")
                        .HasColumnType("integer");

                    b.ToTable("TagsLive");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.TagHistoryChunk", b =>
                {
                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Date");

                    b.ToTable("TagHistoryChunks");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.TagInput", b =>
                {
                    b.Property<int>("InputTagId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("TagId");

                    b.ToTable("TagInputs");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.User", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("AccessType")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StaticHost")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.BlockProperty", b =>
                {
                    b.HasOne("Datalake.PublicApi.Models.Block", "Block")
                        .WithMany("Properties")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.BlockTag", b =>
                {
                    b.HasOne("Datalake.PublicApi.Models.Block", "Block")
                        .WithMany("RelationsToTags")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalake.PublicApi.Models.Tag", "Tag")
                        .WithMany("RelationsToBlocks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.Tag", b =>
                {
                    b.HasOne("Datalake.PublicApi.Models.Source", "Source")
                        .WithMany("Tags")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.TagInput", b =>
                {
                    b.HasOne("Datalake.PublicApi.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.Block", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("RelationsToTags");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.Source", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Datalake.PublicApi.Models.Tag", b =>
                {
                    b.Navigation("RelationsToBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
