name: datalake
services:
  datalake-postgres:
    image: timescale/timescaledb:2.21.0-pg17
    container_name: datalake-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: datalake
    volumes:
      - ./postgres/database:/var/lib/postgresql/data
    command: >
      bash -c "
        docker-entrypoint.sh postgres &
        until pg_isready -h localhost -U \"$POSTGRES_USER\"; do
          sleep 1
        done
        if psql -U \"$POSTGRES_USER\" -tc \"SELECT 1 FROM pg_database WHERE datname = 'keycloak'\" | grep -q 1; then
          echo '✅ Database keycloak already exists'
        else
          psql -U \"$POSTGRES_USER\" -c 'CREATE DATABASE keycloak'
          echo '🎯 Database keycloak created'
        fi
        wait
      "
    ports:
      - "7610:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  datalake-keycloak:
    image: quay.io/keycloak/keycloak:25.0.0
    container_name: datalake-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://datalake-postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    ports:
      - "7620:8080"
    depends_on:
      datalake-postgres:
        condition: service_healthy

  datalake-server:
    image: ${DOCKER_REGISTRY-}datalake-server
    container_name: datalake-server
    build:
      context: ../
      dockerfile: ./Apps/Server/Dockerfile
    depends_on:
      datalake-postgres:
        condition: service_healthy
    environment:
      DATALAKE_HOST: datalake-postgres
      DATALAKE_PORT: 5432
      DATALAKE_DB: datalake
      DATALAKE_DB_USER: postgres
      DATALAKE_DB_PASS: postgres
      APP_VERSION: DEV
    ports:
      - 7630:8080
    volumes:
      - "../Apps/Server/storage:/app/storage"

  datalake-client:
    container_name: datalake-client
    build:
      context: ../Apps/Client/datalake
      dockerfile: Dockerfile
    ports:
      - "7640:7640"
    volumes:
      - ../Apps/Client/datalake:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 7640"

  datalake-prometheus:
    image: prom/prometheus:latest
    container_name: datalake-prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "7650:9090"
    restart: unless-stopped

volumes:
  prometheus_data:
