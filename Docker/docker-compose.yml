name: datalake
services:

# Инфраструктура

  ## [7610] БД с поддержкой time-series
  datalake-postgres:
    image: timescale/timescaledb:2.21.0-pg17
    container_name: datalake-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: datalake
    volumes:
      - ./postgres/database:/var/lib/postgresql/data
    command: >
      bash -c "
        # Ждем полного запуска PostgreSQL
        docker-entrypoint.sh postgres &
        until pg_isready -h localhost -U postgres; do
          sleep 1
        done
        
        # Проверяем и создаем БД keycloak если нужно
        if ! psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'keycloak'\" | grep -q 1; then
          psql -U postgres -c 'CREATE DATABASE keycloak'
          echo '🎯 Database keycloak created'
        else
          echo '✅ Database keycloak already exists'
        fi
        
        # Ожидаем основной процесс
        wait
      "
    ports:
      - "7610:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  ## [7611] Keycloak для внешней аутентификации, например EnergoId
  datalake-keycloak:
    image: quay.io/keycloak/keycloak:25.0.0
    container_name: datalake-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://datalake-postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    ports:
      - "7611:8080"
    depends_on:
      datalake-postgres:
        condition: service_healthy

  ## [7612] RabbitMQ для обмена событиями между сервисами [7613] UI
  datalake-rabbitmq:
    image: rabbitmq:4.1.4-management-alpine
    container_name: datalake-rabbitmq
    ports:
      - 7612:5672 # AMQP protocol
      - 7613:15772 # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq


# Наши сервисы

  ## [7600] Шлюз, перенаправляющий запросы на сервисы
  datalake-gateway:
    image: ${DOCKER_REGISTRY-}datalake-gateway
    container_name: datalake-gateway
    build:
      context: ../
      dockerfile: ./Services/Gateway/Gateway.Host/Dockerfile
    depends_on:
      datalake-postgres:
        condition: service_healthy
    environment:
      DATALAKE_HOST: datalake-postgres
      DATALAKE_PORT: 5432
      DATALAKE_DB: datalake
      DATALAKE_DB_USER: postgres
      DATALAKE_DB_PASS: postgres
      APP_VERSION: DEV
    restart: always
    ports:
      - 7600:8080
    volumes:
      - "../Services/Gateway/Gateway.Host/storage:/app/storage"

  ## [7601] Управление схемой данных - теги, блоки, источники, пользователи и группы, права
  datalake-inventory:
    image: ${DOCKER_REGISTRY-}datalake-inventory
    container_name: datalake-inventory
    build:
      context: ../
      dockerfile: ./Services/Inventory/Inventory.Host/Dockerfile
    depends_on:
      datalake-postgres:
        condition: service_healthy
      datalake-rabbitmq:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 2s
      retries: 5
    environment:
      DATALAKE_HOST: datalake-postgres
      DATALAKE_PORT: 5432
      DATALAKE_DB: datalake
      DATALAKE_DB_USER: postgres
      DATALAKE_DB_PASS: postgres
      APP_VERSION: DEV
    restart: always
    ports:
      - 7601:8080
    volumes:
      - "../Services/Inventory/Inventory.Host/storage:/app/storage"

  ## [7602] Сбор, запись, чтение и расчет данных
  datalake-data:
    image: ${DOCKER_REGISTRY-}datalake-data
    container_name: datalake-data
    build:
      context: ../
      dockerfile: ./Services/Data/Data.Host/Dockerfile
    depends_on:
      datalake-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 2s
      retries: 5
    environment:
      DB_HOST: datalake-postgres
      DB_PORT: 5432
      DB_NAME: datalake
      DB_USER: postgres
      DB_PASS: postgres
      APP_VERSION: DEV
    restart: always
    ports:
      - 7602:8080
    volumes:
      - "../Services/Data/Data.Host/storage:/app/storage"

  ## [7603] События
  datalake-events:
    image: ${DOCKER_REGISTRY-}datalake-events
    container_name: datalake-events
    build:
      context: ../
      dockerfile: ./Services/EventsService/Dockerfile
    depends_on:
      datalake-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 2s
      retries: 5
    environment:
      DATALAKE_HOST: datalake-postgres
      DATALAKE_PORT: 5432
      DATALAKE_DB: datalake
      DATALAKE_DB_USER: postgres
      DATALAKE_DB_PASS: postgres
      APP_VERSION: DEV
    restart: always
    ports:
      - 7603:8080
    volumes:
      - "../Services/EventsService/storage:/app/storage"


# Необязательные дополнения

  ## [7604] Клиент в dev режиме
  datalake-client:
    container_name: datalake-client
    build:
      context: ../Client/datalake
      dockerfile: Dockerfile
    restart: always
    ports:
      - "7604:7604"
    volumes:
      - ../Client/datalake:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 7604"

# Временные данные
volumes:
  rabbitmq_data:
