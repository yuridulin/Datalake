{
	"info": {
		"_postman_id": "0ebe7d0f-9eb4-418d-9e8d-e680a91d1fef",
		"name": "Datalake",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2572937"
	},
	"item": [
		{
			"name": "Список тегов",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:83/api/tags/list",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "83",
					"path": [
						"api",
						"tags",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Дерево объектов",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:83/api/console/tree",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "83",
					"path": [
						"api",
						"console",
						"tree"
					]
				},
				"description": "Получение дерева объектов, первый уровень которого - источники, по которым сгруппированы теги. Теги собираются в древовидную структуру по имени, в качестве разделителя используется точка (OPC DA подход)"
			},
			"response": []
		},
		{
			"name": "Текущие значения тегов",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Request\": {\r\n        \"Tags\": [],\r\n        \"TagNames\": []\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:83/api/tags/live",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "83",
					"path": [
						"api",
						"tags",
						"live"
					]
				},
				"description": "Список значений из базы данных по группам. Каждая группа запрашивает значения по тегам из списка, используя указанный диапазон дат, шаг и агрегирующую функцию.\n\nСписок тегов предполагается как массив с именами тегов. Он может быть пустым, в этом случае будут выбраны все существующие в базе теги.\n\nДиапазон времени выбирается как отрезок от Old включительно до Young включительно. Если Young не указывается, будет использована текущая дата. Если Old не указывается, используется Young с отброшенным временем. Если не указываются обе даты, в качестве ответа будут возвращены текущие значения.\n\nШаг измеряется в миллисекундах. Если он равен нулю, значения будут получены по изменению.\n\nДоступные агрегирующие функции:\n\n- List - возвращает список значений от старых записей к новым. Для остальных функций List выступает источником данных и выполняется в фоне\n- Sum - сумма значений\n- Avg - среднее значение\n- Min - минимальное значение\n- Max - максимальное значение"
			},
			"response": []
		},
		{
			"name": "История значений тегов",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Request\": [\r\n        {\r\n            \"Tags\": [],\r\n            \"TagNames\": [],\r\n            \"Young\": \"2023-10-24T02:00:00.000Z\",\r\n            \"Old\": \"2023-10-25T11:20:00.000Z\",\r\n            \"Resolution\": 0,\r\n            \"Func\": 0\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:83/api/tags/history",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "83",
					"path": [
						"api",
						"tags",
						"history"
					]
				},
				"description": "Список значений из базы данных по группам. Каждая группа запрашивает значения по тегам из списка, используя указанный диапазон дат, шаг и агрегирующую функцию.\n\nСписок тегов предполагается как массив с именами тегов. Он может быть пустым, в этом случае будут выбраны все существующие в базе теги.\n\nДиапазон времени выбирается как отрезок от Old включительно до Young включительно. Если Young не указывается, будет использована текущая дата. Если Old не указывается, используется Young с отброшенным временем. Если не указываются обе даты, в качестве ответа будут возвращены текущие значения.\n\nШаг измеряется в миллисекундах. Если он равен нулю, значения будут получены по изменению.\n\nДоступные агрегирующие функции:\n\n- List - возвращает список значений от старых записей к новым. Для остальных функций List выступает источником данных и выполняется в фоне\n- Sum - сумма значений\n- Avg - среднее значение\n- Min - минимальное значение\n- Max - максимальное значение"
			},
			"response": []
		},
		{
			"name": "Список объектов",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:83/api/blocks/list",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "83",
					"path": [
						"api",
						"blocks",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Текущие значения тегов объекта",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Id\": 1\r\n}"
				},
				"url": {
					"raw": "http://localhost:83/api/blocks/live",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "83",
					"path": [
						"api",
						"blocks",
						"live"
					]
				}
			},
			"response": []
		},
		{
			"name": "История значений тегов объекта",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Id\": 1,\r\n    \"Young\": \"2023-10-24T02:00:00.000Z\",\r\n    \"Old\": \"2023-10-25T11:20:00.000Z\",\r\n    \"Resolution\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:83/api/blocks/history",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "83",
					"path": [
						"api",
						"blocks",
						"history"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}