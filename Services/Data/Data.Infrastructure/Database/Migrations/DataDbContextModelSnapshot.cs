// <auto-generated />
using System;
using Datalake.Data.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Datalake.Data.Infrastructure.Database.Migrations
{
    [DbContext(typeof(DataDbContext))]
    partial class DataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("data")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Datalake.Domain.Entities.Source", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("Sources", "public");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Aggregation")
                        .HasColumnType("integer");

                    b.Property<int?>("AggregationPeriod")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Formula")
                        .HasColumnType("text");

                    b.Property<Guid>("GlobalGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScaling")
                        .HasColumnType("boolean");

                    b.Property<float>("MaxEu")
                        .HasColumnType("real");

                    b.Property<float>("MaxRaw")
                        .HasColumnType("real");

                    b.Property<float>("MinEu")
                        .HasColumnType("real");

                    b.Property<float>("MinRaw")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Resolution")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceItem")
                        .HasColumnType("text");

                    b.Property<int?>("SourceTagBlockId")
                        .HasColumnType("integer");

                    b.Property<int?>("SourceTagId")
                        .HasColumnType("integer");

                    b.Property<int?>("ThresholdSourceTagBlockId")
                        .HasColumnType("integer");

                    b.Property<int?>("ThresholdSourceTagId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("SourceTagId");

                    b.HasIndex("ThresholdSourceTagId");

                    b.ToTable((string)null);

                    b.ToView("Tags", "public");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.TagInput", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int?>("InputBlockId")
                        .HasColumnType("integer");

                    b.Property<int?>("InputTagId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InputTagId");

                    b.HasIndex("TagId");

                    b.ToTable((string)null);

                    b.ToView("TagInputs", "public");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.TagThreshold", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<float>("InputValue")
                        .HasColumnType("real");

                    b.Property<float>("OutputValue")
                        .HasColumnType("real");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable((string)null);

                    b.ToView("TagThresholds", "public");
                });

            modelBuilder.Entity("Datalake.Domain.ValueObjects.TagHistory", b =>
                {
                    b.Property<bool?>("Boolean")
                        .HasColumnType("boolean")
                        .HasColumnName("Boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date");

                    b.Property<float?>("Number")
                        .HasColumnType("real")
                        .HasColumnName("Number");

                    b.Property<byte>("Quality")
                        .HasColumnType("smallint")
                        .HasColumnName("Quality");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("TagId");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.HasIndex("TagId", "Date")
                        .IsUnique()
                        .IsDescending(false, true)
                        .HasDatabaseName("TagsHistory_TagId_Date_idx");

                    b.ToTable("TagsHistory", "data");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Tag", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.Source", "Source")
                        .WithMany("Tags")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datalake.Domain.Entities.Tag", "SourceTag")
                        .WithMany()
                        .HasForeignKey("SourceTagId");

                    b.HasOne("Datalake.Domain.Entities.Tag", "ThresholdSourceTag")
                        .WithMany()
                        .HasForeignKey("ThresholdSourceTagId");

                    b.Navigation("Source");

                    b.Navigation("SourceTag");

                    b.Navigation("ThresholdSourceTag");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.TagInput", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.Tag", "InputTag")
                        .WithMany()
                        .HasForeignKey("InputTagId");

                    b.HasOne("Datalake.Domain.Entities.Tag", "Tag")
                        .WithMany("Inputs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputTag");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.TagThreshold", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.Tag", "Tag")
                        .WithMany("Thresholds")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Source", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Tag", b =>
                {
                    b.Navigation("Inputs");

                    b.Navigation("Thresholds");
                });
#pragma warning restore 612, 618
        }
    }
}
