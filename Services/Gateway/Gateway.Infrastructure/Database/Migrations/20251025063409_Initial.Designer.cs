// <auto-generated />
using System;
using Datalake.Gateway.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Datalake.Gateway.Infrastructure.Database.Migrations
{
    [DbContext(typeof(GatewayDbContext))]
    [Migration("20251025063409_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gateway")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Datalake.Domain.Entities.AccessRule", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<byte>("AccessType")
                        .HasColumnType("smallint");

                    b.Property<int?>("BlockId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("boolean");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("TagId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserGroupGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserGroupGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable((string)null);

                    b.ToView("AccessRules", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("AffectedAccessRightsId")
                        .HasColumnType("integer");

                    b.Property<int?>("AffectedBlockId")
                        .HasColumnType("integer");

                    b.Property<int?>("AffectedSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("AffectedTagId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AffectedUserGroupGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AffectedUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("RefId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AffectedAccessRightsId");

                    b.HasIndex("AffectedBlockId");

                    b.HasIndex("AffectedSourceId");

                    b.HasIndex("AffectedTagId");

                    b.HasIndex("AffectedUserGroupGuid");

                    b.HasIndex("AffectedUserGuid");

                    b.HasIndex("AuthorGuid");

                    b.ToTable((string)null);

                    b.ToView("Logs", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Block", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GlobalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable((string)null);

                    b.ToView("Blocks", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.BlockProperty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.ToTable((string)null);

                    b.ToView("BlockProperties", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.BlockTag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Relation")
                        .HasColumnType("integer");

                    b.Property<int?>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("BlockId", "TagId")
                        .IsUnique();

                    b.ToTable((string)null);

                    b.ToView("BlockTags", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.EnergoId", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Birthday")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EnterpriseCode")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("text");

                    b.Property<string>("PersonnelNumber")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("UploaderEnterpriseCode")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable((string)null);

                    b.ToView("Users", "energo-id");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("EnergoIdApi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstanceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeycloakClient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeycloakHost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("Settings", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Source", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("Sources", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Aggregation")
                        .HasColumnType("integer");

                    b.Property<int?>("AggregationPeriod")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Formula")
                        .HasColumnType("text");

                    b.Property<Guid>("GlobalGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScaling")
                        .HasColumnType("boolean");

                    b.Property<float>("MaxEu")
                        .HasColumnType("real");

                    b.Property<float>("MaxRaw")
                        .HasColumnType("real");

                    b.Property<float>("MinEu")
                        .HasColumnType("real");

                    b.Property<float>("MinRaw")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Resolution")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceItem")
                        .HasColumnType("text");

                    b.Property<int?>("SourceTagBlockId")
                        .HasColumnType("integer");

                    b.Property<int?>("SourceTagId")
                        .HasColumnType("integer");

                    b.Property<int?>("ThresholdSourceTagBlockId")
                        .HasColumnType("integer");

                    b.Property<int?>("ThresholdSourceTagId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("SourceTagId");

                    b.HasIndex("ThresholdSourceTagId");

                    b.ToTable((string)null);

                    b.ToView("Tags", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.TagInput", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int?>("InputBlockId")
                        .HasColumnType("integer");

                    b.Property<int?>("InputTagId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InputTagId");

                    b.HasIndex("TagId");

                    b.ToTable((string)null);

                    b.ToView("TagInputs", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.TagThreshold", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<float>("InputValue")
                        .HasColumnType("real");

                    b.Property<float>("OutputValue")
                        .HasColumnType("real");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable((string)null);

                    b.ToView("TagThresholds", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Guid");

                    b.HasIndex("Type");

                    b.ToTable((string)null);

                    b.ToView("Users", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ParentGuid");

                    b.ToTable((string)null);

                    b.ToView("UserGroups", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.UserGroupRelation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<byte>("AccessType")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserGroupGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.HasIndex("UserGroupGuid", "UserGuid")
                        .IsUnique();

                    b.ToTable((string)null);

                    b.ToView("UserGroupRelations", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Token");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("UserSessions", "gateway");
                });

            modelBuilder.Entity("Datalake.Domain.ValueObjects.CalculatedAccessRule", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    b.Property<byte>("AccessType")
                        .HasColumnType("smallint")
                        .HasColumnName("AccessType");

                    b.Property<int?>("BlockId")
                        .HasColumnType("integer")
                        .HasColumnName("BlockId");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("boolean")
                        .HasColumnName("IsGlobal");

                    b.Property<int>("RuleId")
                        .HasColumnType("integer")
                        .HasColumnName("RuleId");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer")
                        .HasColumnName("SourceId");

                    b.Property<int?>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("TagId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("UserGroupGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGroupGuid");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGuid");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserGroupGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable((string)null);

                    b.ToView("CalculatedAccessRules", "inventory");
                });

            modelBuilder.Entity("Datalake.Domain.ValueObjects.TagHistoryValue", b =>
                {
                    b.Property<bool?>("Boolean")
                        .HasColumnType("boolean")
                        .HasColumnName("Boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date");

                    b.Property<float?>("Number")
                        .HasColumnType("real")
                        .HasColumnName("Number");

                    b.Property<byte>("Quality")
                        .HasColumnType("smallint")
                        .HasColumnName("Quality");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("TagId");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("Text");

                    b.HasIndex("TagId", "Date")
                        .IsUnique()
                        .IsDescending(false, true)
                        .HasDatabaseName("TagsHistory_TagId_Date_idx");

                    b.ToTable((string)null);

                    b.ToView("TagsHistory", "data");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.AccessRule", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.Block", "Block")
                        .WithMany("AccessRules")
                        .HasForeignKey("BlockId");

                    b.HasOne("Datalake.Domain.Entities.Source", "Source")
                        .WithMany("AccessRules")
                        .HasForeignKey("SourceId");

                    b.HasOne("Datalake.Domain.Entities.Tag", "Tag")
                        .WithMany("AccessRules")
                        .HasForeignKey("TagId");

                    b.HasOne("Datalake.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("AccessRules")
                        .HasForeignKey("UserGroupGuid");

                    b.HasOne("Datalake.Domain.Entities.User", "User")
                        .WithMany("AccessRules")
                        .HasForeignKey("UserGuid");

                    b.Navigation("Block");

                    b.Navigation("Source");

                    b.Navigation("Tag");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.AccessRule", "AffectedAccessRights")
                        .WithMany()
                        .HasForeignKey("AffectedAccessRightsId");

                    b.HasOne("Datalake.Domain.Entities.Block", "AffectedBlock")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AffectedBlockId");

                    b.HasOne("Datalake.Domain.Entities.Source", "AffectedSource")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AffectedSourceId");

                    b.HasOne("Datalake.Domain.Entities.Tag", "AffectedTag")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AffectedTagId");

                    b.HasOne("Datalake.Domain.Entities.UserGroup", "AffectedUserGroup")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AffectedUserGroupGuid");

                    b.HasOne("Datalake.Domain.Entities.User", "AffectedUser")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AffectedUserGuid");

                    b.HasOne("Datalake.Domain.Entities.User", "Author")
                        .WithMany("AuditActions")
                        .HasForeignKey("AuthorGuid");

                    b.Navigation("AffectedAccessRights");

                    b.Navigation("AffectedBlock");

                    b.Navigation("AffectedSource");

                    b.Navigation("AffectedTag");

                    b.Navigation("AffectedUser");

                    b.Navigation("AffectedUserGroup");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Block", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.Block", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.BlockProperty", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.Block", "Block")
                        .WithMany("Properties")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.BlockTag", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.Block", "Block")
                        .WithMany("RelationsToTags")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datalake.Domain.Entities.Tag", "Tag")
                        .WithMany("RelationsToBlocks")
                        .HasForeignKey("TagId");

                    b.Navigation("Block");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Tag", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.Source", "Source")
                        .WithMany("Tags")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datalake.Domain.Entities.Tag", "AggregationSourceTag")
                        .WithMany("AggregateTagsUsingThisTag")
                        .HasForeignKey("SourceTagId");

                    b.HasOne("Datalake.Domain.Entities.Tag", "ThresholdsSourceTag")
                        .WithMany("ThresholdsTagsUsingThisTag")
                        .HasForeignKey("ThresholdSourceTagId");

                    b.Navigation("AggregationSourceTag");

                    b.Navigation("Source");

                    b.Navigation("ThresholdsSourceTag");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.TagInput", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.Tag", "InputTag")
                        .WithMany("InputsUsingThisTag")
                        .HasForeignKey("InputTagId");

                    b.HasOne("Datalake.Domain.Entities.Tag", "Tag")
                        .WithMany("Inputs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputTag");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.TagThreshold", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.Tag", "Tag")
                        .WithMany("Thresholds")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.User", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.EnergoId", "EnergoId")
                        .WithOne("User")
                        .HasForeignKey("Datalake.Domain.Entities.User", "Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnergoId");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.UserGroup", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.UserGroup", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentGuid");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.UserGroupRelation", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("UsersRelations")
                        .HasForeignKey("UserGroupGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datalake.Domain.Entities.User", "User")
                        .WithMany("GroupsRelations")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Datalake.Domain.ValueObjects.CalculatedAccessRule", b =>
                {
                    b.HasOne("Datalake.Domain.Entities.Block", "Block")
                        .WithMany("CalculatedAccessRules")
                        .HasForeignKey("BlockId");

                    b.HasOne("Datalake.Domain.Entities.Source", "Source")
                        .WithMany("CalculatedAccessRules")
                        .HasForeignKey("SourceId");

                    b.HasOne("Datalake.Domain.Entities.Tag", "Tag")
                        .WithMany("CalculatedAccessRules")
                        .HasForeignKey("TagId");

                    b.HasOne("Datalake.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("CalculatedAccessRules")
                        .HasForeignKey("UserGroupGuid");

                    b.HasOne("Datalake.Domain.Entities.User", "User")
                        .WithMany("CalculatedAccessRules")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Source");

                    b.Navigation("Tag");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Block", b =>
                {
                    b.Navigation("AccessRules");

                    b.Navigation("AuditLogs");

                    b.Navigation("CalculatedAccessRules");

                    b.Navigation("Children");

                    b.Navigation("Properties");

                    b.Navigation("RelationsToTags");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.EnergoId", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Source", b =>
                {
                    b.Navigation("AccessRules");

                    b.Navigation("AuditLogs");

                    b.Navigation("CalculatedAccessRules");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.Tag", b =>
                {
                    b.Navigation("AccessRules");

                    b.Navigation("AggregateTagsUsingThisTag");

                    b.Navigation("AuditLogs");

                    b.Navigation("CalculatedAccessRules");

                    b.Navigation("Inputs");

                    b.Navigation("InputsUsingThisTag");

                    b.Navigation("RelationsToBlocks");

                    b.Navigation("Thresholds");

                    b.Navigation("ThresholdsTagsUsingThisTag");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.User", b =>
                {
                    b.Navigation("AccessRules");

                    b.Navigation("AuditActions");

                    b.Navigation("AuditLogs");

                    b.Navigation("CalculatedAccessRules");

                    b.Navigation("GroupsRelations");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Datalake.Domain.Entities.UserGroup", b =>
                {
                    b.Navigation("AccessRules");

                    b.Navigation("AuditLogs");

                    b.Navigation("CalculatedAccessRules");

                    b.Navigation("Children");

                    b.Navigation("UsersRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
