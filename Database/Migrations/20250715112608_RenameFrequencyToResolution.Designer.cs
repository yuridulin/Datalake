// <auto-generated />
using System;
using Datalake.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Datalake.Database.Migrations
{
    [DbContext(typeof(DatalakeEfContext))]
    [Migration("20250715112608_RenameFrequencyToResolution")]
    partial class RenameFrequencyToResolution
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Datalake.Database.Tables.AccessRights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte>("AccessType")
                        .HasColumnType("smallint");

                    b.Property<int?>("BlockId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("boolean");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("TagId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserGroupGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserGroupGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("AccessRights", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GlobalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Blocks", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.BlockProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.ToTable("BlockProperties", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.BlockTag", b =>
                {
                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<int?>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Relation")
                        .HasColumnType("integer");

                    b.HasKey("BlockId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BlockTags", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AffectedAccessRightsId")
                        .HasColumnType("integer");

                    b.Property<int?>("AffectedBlockId")
                        .HasColumnType("integer");

                    b.Property<int?>("AffectedSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("AffectedTagId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AffectedUserGroupGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AffectedUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("RefId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AffectedAccessRightsId");

                    b.HasIndex("AffectedBlockId");

                    b.HasIndex("AffectedSourceId");

                    b.HasIndex("AffectedTagId");

                    b.HasIndex("AffectedUserGroupGuid");

                    b.HasIndex("AffectedUserGuid");

                    b.HasIndex("AuthorGuid");

                    b.ToTable("Logs", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.Settings", b =>
                {
                    b.Property<string>("EnergoIdApi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstanceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeycloakClient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeycloakHost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Settings", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sources", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Aggregation")
                        .HasColumnType("integer");

                    b.Property<int?>("AggregationPeriod")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Formula")
                        .HasColumnType("text");

                    b.Property<Guid>("GlobalGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsScaling")
                        .HasColumnType("boolean");

                    b.Property<float>("MaxEu")
                        .HasColumnType("real");

                    b.Property<float>("MaxRaw")
                        .HasColumnType("real");

                    b.Property<float>("MinEu")
                        .HasColumnType("real");

                    b.Property<float>("MinRaw")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Resolution")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceItem")
                        .HasColumnType("text");

                    b.Property<int?>("SourceTagId")
                        .HasColumnType("integer");

                    b.Property<int?>("SourceTagRelationId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("SourceTagId");

                    b.ToTable("Tags", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.TagHistory", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("Number")
                        .HasColumnType("real");

                    b.Property<int>("Quality")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasIndex("TagId", "Date")
                        .IsUnique()
                        .IsDescending(false, true)
                        .HasDatabaseName("TagsHistory_TagId_Date_idx");

                    b.ToTable("TagsHistory", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.TagInput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("InputTagId")
                        .HasColumnType("integer");

                    b.Property<int?>("InputTagRelationId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InputTagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagInputs", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EnergoIdGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("StaticHost")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.UserGroup", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ParentGuid");

                    b.ToTable("UserGroups", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.UserGroupRelation", b =>
                {
                    b.Property<Guid>("UserGroupGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.Property<byte>("AccessType")
                        .HasColumnType("smallint");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("UserGroupGuid", "UserGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("UserGroupRelation", "public");
                });

            modelBuilder.Entity("Datalake.Database.Tables.AccessRights", b =>
                {
                    b.HasOne("Datalake.Database.Tables.Block", "Block")
                        .WithMany("AccessRightsList")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Datalake.Database.Tables.Source", "Source")
                        .WithMany("AccessRightsList")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Datalake.Database.Tables.Tag", "Tag")
                        .WithMany("AccessRightsList")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Datalake.Database.Tables.UserGroup", "UserGroup")
                        .WithMany("AccessRightsList")
                        .HasForeignKey("UserGroupGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Datalake.Database.Tables.User", "User")
                        .WithMany("AccessRightsList")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Block");

                    b.Navigation("Source");

                    b.Navigation("Tag");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Datalake.Database.Tables.Block", b =>
                {
                    b.HasOne("Datalake.Database.Tables.Block", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Datalake.Database.Tables.BlockProperty", b =>
                {
                    b.HasOne("Datalake.Database.Tables.Block", "Block")
                        .WithMany("Properties")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Datalake.Database.Tables.BlockTag", b =>
                {
                    b.HasOne("Datalake.Database.Tables.Block", "Block")
                        .WithMany("RelationsToTags")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datalake.Database.Tables.Tag", "Tag")
                        .WithMany("RelationsToBlocks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Datalake.Database.Tables.Log", b =>
                {
                    b.HasOne("Datalake.Database.Tables.AccessRights", "AffectedAccessRights")
                        .WithMany("Logs")
                        .HasForeignKey("AffectedAccessRightsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Datalake.Database.Tables.Block", "AffectedBlock")
                        .WithMany("Logs")
                        .HasForeignKey("AffectedBlockId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Datalake.Database.Tables.Source", "AffectedSource")
                        .WithMany("Logs")
                        .HasForeignKey("AffectedSourceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Datalake.Database.Tables.Tag", "AffectedTag")
                        .WithMany("Logs")
                        .HasForeignKey("AffectedTagId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Datalake.Database.Tables.UserGroup", "AffectedUserGroup")
                        .WithMany("Logs")
                        .HasForeignKey("AffectedUserGroupGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Datalake.Database.Tables.User", "AffectedUser")
                        .WithMany("Logs")
                        .HasForeignKey("AffectedUserGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Datalake.Database.Tables.User", "Author")
                        .WithMany("Actions")
                        .HasForeignKey("AuthorGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AffectedAccessRights");

                    b.Navigation("AffectedBlock");

                    b.Navigation("AffectedSource");

                    b.Navigation("AffectedTag");

                    b.Navigation("AffectedUser");

                    b.Navigation("AffectedUserGroup");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Datalake.Database.Tables.Tag", b =>
                {
                    b.HasOne("Datalake.Database.Tables.Source", "Source")
                        .WithMany("Tags")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Datalake.Database.Tables.Tag", "SourceTag")
                        .WithMany()
                        .HasForeignKey("SourceTagId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Source");

                    b.Navigation("SourceTag");
                });

            modelBuilder.Entity("Datalake.Database.Tables.TagInput", b =>
                {
                    b.HasOne("Datalake.Database.Tables.Tag", "InputTag")
                        .WithMany()
                        .HasForeignKey("InputTagId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Datalake.Database.Tables.Tag", "Tag")
                        .WithMany("Inputs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputTag");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Datalake.Database.Tables.UserGroup", b =>
                {
                    b.HasOne("Datalake.Database.Tables.UserGroup", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Datalake.Database.Tables.UserGroupRelation", b =>
                {
                    b.HasOne("Datalake.Database.Tables.UserGroup", "UserGroup")
                        .WithMany("UsersRelations")
                        .HasForeignKey("UserGroupGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datalake.Database.Tables.User", "User")
                        .WithMany("GroupsRelations")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Datalake.Database.Tables.AccessRights", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Datalake.Database.Tables.Block", b =>
                {
                    b.Navigation("AccessRightsList");

                    b.Navigation("Children");

                    b.Navigation("Logs");

                    b.Navigation("Properties");

                    b.Navigation("RelationsToTags");
                });

            modelBuilder.Entity("Datalake.Database.Tables.Source", b =>
                {
                    b.Navigation("AccessRightsList");

                    b.Navigation("Logs");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Datalake.Database.Tables.Tag", b =>
                {
                    b.Navigation("AccessRightsList");

                    b.Navigation("Inputs");

                    b.Navigation("Logs");

                    b.Navigation("RelationsToBlocks");
                });

            modelBuilder.Entity("Datalake.Database.Tables.User", b =>
                {
                    b.Navigation("AccessRightsList");

                    b.Navigation("Actions");

                    b.Navigation("GroupsRelations");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Datalake.Database.Tables.UserGroup", b =>
                {
                    b.Navigation("AccessRightsList");

                    b.Navigation("Children");

                    b.Navigation("Logs");

                    b.Navigation("UsersRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
